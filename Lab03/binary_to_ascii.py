def binary_to_ascii(binary):
    sigma = ['0','1']
    state_set = ['q0', 'q1', 'q2', 'q3', 'q4', 'q5', 'q6', 'q7', ' ', 'q8', 
                'q9', 'q10', 'q11', 'q12', 'q13', 'a', 'q14', 'b', 'c', 'q15', 
                'q16', 'd', 'e', 'q17', 'f', 'g', 'q18', 'q19', 'q20', 'h', 
                'i', 'q21', 'j', 'k', 'q22', 'q23', 'l', 'm', 'q24', 'n',
                'o', 'q25', 'q26', 'q27', 'q28', 'p', 'q', 'q29', 'r', 's', 
                'q30', 'q31', 't', 'u', 'q32', 'v', 'w', 'q33', 'q34', 'q35', 
                'x', 'y', 'q36', 'z', 'T0', 'T1', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7']
    accept_set = [' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 
                'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 
                't', 'u', 'v', 'w', 'x', 'y', 'z']
    start_state = 'q0'
    delta = {
            ('q0', '0') : 'q1',
            ('q0', '1') : 'T0',

            ('q1', '0') : 'q2',
            ('q1', '1') : 'q8',

            ('q2', '0') : 'T1',
            ('q2', '1') : 'q3',

            ('q3', '0') : 'q4',
            ('q3', '1') : 'T2',

            ('q4', '0') : 'q5',
            ('q4', '1') : 'T3',

            ('q5', '0') : 'q6',
            ('q5', '1') : 'T4',

            ('q6', '0') : 'q7',
            ('q6', '1') : 'T5',

            ('q7', '0') : ' ',
            ('q7', '1') : 'T6',

            (' ', '0') : 'q1',
            (' ', '1') : 'T0',

            ('q8', '0') : 'T2',
            ('q8', '1') : 'q9',

            ('q9', '0') : 'q10',
            ('q9', '1') : 'q25',

            ('q10', '0') : 'q11',
            ('q10', '1') : 'q18',

            ('q11', '0') : 'q12',
            ('q11', '1') : 'q15',

            ('q12', '0') : 'q13',
            ('q12', '1') : 'q14',

            ('q13', '0') : 'T0',
            ('q13', '1') : 'a',

            ('a', '0') : 'q1',
            ('a', '1') : 'T0',

            ('q14', '0') : 'b',
            ('q14', '1') : 'c',

            ('b', '0') : 'q1',
            ('b', '1') : 'T0',

            ('c', '0') : 'q1',
            ('c', '1') : 'T0',

            ('q15', '0') : 'q16',
            ('q15', '1') : 'q17',

            ('q16', '0') : 'd',
            ('q16', '1') : 'e',

            ('d', '0') : 'q1',
            ('d', '1') : 'T0',

            ('e', '0') : 'q1',
            ('e', '1') : 'T0',

            ('q17', '0') : 'f',
            ('q17', '1') : 'g',

            ('f', '0') : 'q1',
            ('f', '1') : 'T0',

            ('g', '0') : 'q1',
            ('g', '1') : 'T0',

            ('q18', '0') : 'q19',
            ('q18', '1') : 'q22',

            ('q19', '0') : 'q20',
            ('q19', '1') : 'q21',

            ('q20', '0') : 'h',
            ('q20', '1') : 'i',

            ('h', '0') : 'q1',
            ('h', '1') : 'T0',

            ('i', '0') : 'q1',
            ('i', '1') : 'T0',

            ('q21', '0') : 'j',
            ('q21', '1') : 'k',

            ('j', '0') : 'q1',
            ('j', '1') : 'T0',

            ('k', '0') : 'q1',
            ('k', '1') : 'T0',

            ('q22', '0') : 'q23',
            ('q22', '1') : 'q24',

            ('q23', '0') : 'l',
            ('q23', '1') : 'm',

            ('l', '0') : 'q1',
            ('l', '1') : 'T0',

            ('m', '0') : 'q1',
            ('m', '1') : 'T0',

            ('q24', '0') : 'n',
            ('q24', '1') : 'o',

            ('n', '0') : 'q1',
            ('n', '1') : 'T0',

            ('o', '0') : 'q1',
            ('o', '1') : 'T0',

            ('q25', '0') : 'q26',
            ('q25', '1') : 'q33',

            ('q26', '0') : 'q27',
            ('q26', '1') : 'q30',

            ('q27', '0') : 'q28',
            ('q27', '1') : 'q29',

            ('q28', '0') : 'p',
            ('q28', '1') : 'q',

            ('p', '0') : 'q1',
            ('p', '1') : 'T0',

            ('q', '0') : 'q1',
            ('q', '1') : 'T0',

            ('q29', '0') : 'r',
            ('q29', '1') : 's',

            ('r', '0') : 'q1',
            ('r', '1') : 'T0',

            ('s', '0') : 'q1',
            ('s', '1') : 'T0',

            ('q30', '0') : 'q31',
            ('q30', '1') : 'q32',

            ('q31', '0') : 't',
            ('q31', '1') : 'u',

            ('t', '0') : 'q1',
            ('t', '1') : 'T0',

            ('u', '0') : 'q1',
            ('u', '1') : 'T0',

            ('q32', '0') : 'v',
            ('q32', '1') : 'w',

            ('v', '0') : 'q1',
            ('v', '1') : 'T0',

            ('w', '0') : 'q1',
            ('w', '1') : 'T0',

            ('q33', '0') : 'q34',
            ('q33', '1') : 'T0',

            ('q34', '0') : 'q35',
            ('q34', '1') : 'q36',

            ('q35', '0') : 'x',
            ('q35', '1') : 'y',

            ('x', '0') : 'q1',
            ('x', '1') : 'T0',

            ('y', '0') : 'q1',
            ('y', '1') : 'T0',

            ('q36', '0') : 'z',
            ('q36', '1') : 'T0',

            ('z', '0') : 'q1',
            ('z', '1') : 'T0',

            ('T0', '0') : 'T1',
            ('T0', '1') : 'T1',

            ('T1', '0') : 'T2',
            ('T1', '1') : 'T2',

            ('T2', '0') : 'T3',
            ('T2', '1') : 'T3',

            ('T3', '0') : 'T4',
            ('T3', '1') : 'T4',

            ('T4', '0') : 'T5',
            ('T4', '1') : 'T5',

            ('T5', '0') : 'T6',
            ('T5', '1') : 'T6',

            ('T6', '0') : 'T7',
            ('T6', '1') : 'T7',

            ('T7', '0') : 'S1',
            ('T7', '1') : 'T0',
        }
    
    ascii_message = ""

    # Set the start state
    current_state = start_state

    # Iterate the input binary
    for bit in binary:
        # Check if the bit is in sigma
        if bit not in sigma: return ascii_message

        # Get next state
        current_state = delta[(current_state, bit)]

        # Check if we are in a accept state
        if current_state in accept_set:
            ascii_message += current_state

    return ascii_message

def main():
    binary_value = '011101000110100101100101011100110010000001110011011101010110001101101011'

    ascii_value = binary_to_ascii(binary_value)

    print(f"Binary: {binary_value}")
    print(f"ASCII: {ascii_value}")

main()